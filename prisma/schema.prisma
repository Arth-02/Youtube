generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  name                 String?
  email                String?   @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime  @default(now())
  subscribedChannelIds String[]
  likedVideoIds        String[]
  dislikedVideoIds     String[]

  account Account?
  channel Channel?
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Channel {
  id              String   @id @default(uuid())
  userId          String   @unique
  name            String
  handle          String
  imageSrc        String
  createdAt       DateTime @default(now())
  subscriberCount Int      @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
  videos   Video[]
}

model Video {
  id           String   @id @default(uuid())
  channelId    String
  title        String
  description  String
  likeCount    Int      @default(0)
  dislikeCount Int      @default(0)
  viewCount    Int      @default(0)
  createdAt    DateTime @default(now())
  thumbnailSrc String
  videoSrc     String

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(uuid())
  videoId   String
  channelId String
  text      String
  createdAt DateTime @default(now())

  video   Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
}